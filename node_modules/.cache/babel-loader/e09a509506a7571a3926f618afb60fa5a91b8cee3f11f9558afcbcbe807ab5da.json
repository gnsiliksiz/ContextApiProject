{"ast":null,"code":"var _jsxFileName = \"/Users/gunesiliksiz/Downloads/ContextApiProject/src/TaskContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContext = /*#__PURE__*/createContext();\nconst TaskContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    const response = await axios.get('http://localhost:3004/tasks');\n    setTasks(response.data);\n  };\n  const createTask = async (title, taskDesc) => {\n    const response = await axios.post('http://localhost:3004/tasks', {\n      title,\n      taskDesc\n    });\n    const createdTasks = [...tasks, response.data];\n    setTasks(createdTasks);\n  };\n  const deleteTaskById = async id => {\n    await axios.delete(`http://localhost:3004/tasks/${id}`);\n    const afterDeletingTasks = tasks.filter(task => {\n      return task.id !== id;\n    });\n    setTasks(afterDeletingTasks);\n  };\n  const editTaskById = async (id, updatedTitle, updatedTaskDesc) => {\n    await axios.put(`http://localhost:3004/tasks/${id}`, {\n      title: updatedTitle,\n      taskDesc: updatedTaskDesc\n    });\n    const updatedTasks = tasks.map(task => {\n      if (task.id === id) {\n        return {\n          id,\n          title: updatedTitle,\n          taskDesc: updatedTaskDesc\n        };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      createTask,\n      deleteTaskById,\n      editTaskById\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskContextProvider, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskContextProvider;\nexport { TaskContext, TaskContextProvider };\nvar _c;\n$RefreshReg$(_c, \"TaskContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskContext","TaskContextProvider","_ref","_s","children","tasks","setTasks","fetchTasks","response","get","data","createTask","title","taskDesc","post","createdTasks","deleteTaskById","id","delete","afterDeletingTasks","filter","task","editTaskById","updatedTitle","updatedTaskDesc","put","updatedTasks","map","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gunesiliksiz/Downloads/ContextApiProject/src/TaskContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskContext = createContext();\n\nconst TaskContextProvider = ({ children }) => {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const response = await axios.get('http://localhost:3004/tasks');\n    setTasks(response.data);\n  };\n\n  const createTask = async (title, taskDesc) => {\n    const response = await axios.post('http://localhost:3004/tasks', {\n      title,\n      taskDesc,\n    });\n    const createdTasks = [...tasks, response.data];\n    setTasks(createdTasks);\n  };\n\n  const deleteTaskById = async (id) => {\n    await axios.delete(`http://localhost:3004/tasks/${id}`);\n    const afterDeletingTasks = tasks.filter((task) => {\n      return task.id !== id;\n    });\n    setTasks(afterDeletingTasks);\n  };\n\n  const editTaskById = async (id, updatedTitle, updatedTaskDesc) => {\n    await axios.put(`http://localhost:3004/tasks/${id}`, {\n      title: updatedTitle,\n      taskDesc: updatedTaskDesc,\n    });\n    const updatedTasks = tasks.map((task) => {\n      if (task.id === id) {\n        return { id, title: updatedTitle, taskDesc: updatedTaskDesc };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  };\n\n  return (\n    <TaskContext.Provider value={{ tasks, createTask, deleteTaskById, editTaskById }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};\n\nexport { TaskContext, TaskContextProvider };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGN,aAAa,EAAE;AAEnC,MAAMO,mBAAmB,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdW,UAAU,EAAE;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,6BAA6B,CAAC;IAC/DH,QAAQ,CAACE,QAAQ,CAACE,IAAI,CAAC;EACzB,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC5C,MAAML,QAAQ,GAAG,MAAMX,KAAK,CAACiB,IAAI,CAAC,6BAA6B,EAAE;MAC/DF,KAAK;MACLC;IACF,CAAC,CAAC;IACF,MAAME,YAAY,GAAG,CAAC,GAAGV,KAAK,EAAEG,QAAQ,CAACE,IAAI,CAAC;IAC9CJ,QAAQ,CAACS,YAAY,CAAC;EACxB,CAAC;EAED,MAAMC,cAAc,GAAG,MAAOC,EAAE,IAAK;IACnC,MAAMpB,KAAK,CAACqB,MAAM,CAAE,+BAA8BD,EAAG,EAAC,CAAC;IACvD,MAAME,kBAAkB,GAAGd,KAAK,CAACe,MAAM,CAAEC,IAAI,IAAK;MAChD,OAAOA,IAAI,CAACJ,EAAE,KAAKA,EAAE;IACvB,CAAC,CAAC;IACFX,QAAQ,CAACa,kBAAkB,CAAC;EAC9B,CAAC;EAED,MAAMG,YAAY,GAAG,MAAAA,CAAOL,EAAE,EAAEM,YAAY,EAAEC,eAAe,KAAK;IAChE,MAAM3B,KAAK,CAAC4B,GAAG,CAAE,+BAA8BR,EAAG,EAAC,EAAE;MACnDL,KAAK,EAAEW,YAAY;MACnBV,QAAQ,EAAEW;IACZ,CAAC,CAAC;IACF,MAAME,YAAY,GAAGrB,KAAK,CAACsB,GAAG,CAAEN,IAAI,IAAK;MACvC,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,EAAE;QAClB,OAAO;UAAEA,EAAE;UAAEL,KAAK,EAAEW,YAAY;UAAEV,QAAQ,EAAEW;QAAgB,CAAC;MAC/D;MACA,OAAOH,IAAI;IACb,CAAC,CAAC;IACFf,QAAQ,CAACoB,YAAY,CAAC;EACxB,CAAC;EAED,oBACE3B,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAAExB,KAAK;MAAEM,UAAU;MAAEK,cAAc;MAAEM;IAAa,CAAE;IAAAlB,QAAA,EAC9EA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACY;AAE3B,CAAC;AAAC9B,EAAA,CAhDIF,mBAAmB;AAAAiC,EAAA,GAAnBjC,mBAAmB;AAkDzB,SAASD,WAAW,EAAEC,mBAAmB;AAAG,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}